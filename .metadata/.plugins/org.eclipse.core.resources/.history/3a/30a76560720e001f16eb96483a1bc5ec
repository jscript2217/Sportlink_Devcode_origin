package com.care.boot.board;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.care.boot.PageService;

import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@Service
public class BoardService {
	@Autowired private BoardMapper mapper;
	private String filePath = "E:\\Back\\web-project\\src\\main\\resources\\upload\\";
	
	// [ Board Form ]
	public void boardForm(String cp, Model model) {
		int currentPage = 1;
		try{
			currentPage = Integer.parseInt(cp);
		}catch(Exception e){
			currentPage = 1;
		}
		
		int pageBlock = 3; // 한 페이지에 보일 데이터의 수 
		int end = pageBlock * currentPage; // 테이블에서 가져올 마지막 행번호
		int begin = end - pageBlock + 1; // 테이블에서 가져올 시작 행번호
		
		List<BoardDTO> boards = mapper.boardForm(begin, end);
		int totalCount = mapper.totalCount();
		if(totalCount == 0) {
			return ;
		}
		
		String url = "boardForm?currentPage=";
		String result = PageService.printPage(url, totalCount, pageBlock, currentPage);
		
		model.addAttribute("boards", boards);
		model.addAttribute("result", result);
	}
	
	// [ Board Write & Upload ]
		@Autowired private HttpSession session;
		public String boardWriteProc(MultipartHttpServletRequest multi) {
			System.out.println("title : " + multi.getParameter("title"));
			String sessionId = (String) session.getAttribute("id");
			if(sessionId == null)
				return "redirect:login";
			
			String title = multi.getParameter("title");
			if(title == null || title.trim().isEmpty()) {
				return "redirect:boardWrite";
			}
			
			BoardDTO board = new BoardDTO();
			board.setTitle(title);
			board.setContent(multi.getParameter("content"));
			board.setId(sessionId);
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			board.setWriteDate(sdf.format(new Date()));
			board.setFileName("");
			
			MultipartFile file = multi.getFile("upfile");
			if(file.getSize() != 0) { // 클라이언트가 파일을 업로드 했다면
				// 파일의 이름
				sdf = new SimpleDateFormat("yyyyMMddHHmmss-");
				String fileTime = sdf.format(new Date());
				String fileName = file.getOriginalFilename();
				
				String suffix = fileName.substring(fileName.lastIndexOf(".")+1, fileName.length());
				System.out.println("BoardService-boardWriteProc-suffix : " + suffix);

				// 특정 확장자를 갖는 파일만 Upload를 허용
				//if(suffix.equalsIgnoreCase("pdf") == false)
				//	return "redirect:boardWrite";
				
				// 파일의 저장 경로 ( filePath 필드 추가 작업 진행 )
				String fileSaveDirectory = filePath+sessionId;
				File f = new File(fileSaveDirectory);
				if(f.exists() == false) {
					f.mkdirs();
				}
				
				String fullPath = fileSaveDirectory + "\\" + fileTime + fileName;
				board.setFileName(fullPath);
				f = new File(fullPath);
				try {
					file.transferTo(f);
				} catch (Exception e) {
					e.printStackTrace();
					board.setFileName("");
				} 
				
				/*
				 file.transferTo(); //파일을 이동시키는 기능 
				 <input type="file" name="upfile"> 을 사용하여 서버에 파일 데이터가 전달되면
				 웹서버가 임시파일로 저장을 함. 
				 임시파일로 저장된 파일을 개발자가 원하는 경로로 이동시킬 때 file.transferTo()를 사용함.
				 */
			}
			
			// 조회수랑 게시글 번호는 INSERT 명령 시 입력
			mapper.boardWriteProc(board);
			return "redirect:boardForm";
		}
		
		// [ Board Content & Download ]
		public BoardDTO boardContent(String no) {
			int n = 1;
			try{
				n = Integer.parseInt(no);
			}catch(Exception e){
				return null;
			}
			
			BoardDTO board = mapper.boardContent(n);
			if(board != null) {
				mapper.incrementHits(n);
				board.setHits(board.getHits()+1);
				
				if(board.getFileName() != null) {
					// 소스파일에서 한번, 자바 내부에서 한번 총2번의 ESCAPE 처리를 진행해야한다.
					String[] names = board.getFileName().split("\\\\");
					
					// C:\\Myproject\\springboot-web\\web-project\\src\\main\\resources\\upload\\itbank\\test.pdf
					for(String name : names)
						System.out.println("BoardService-boardContent name : "+ name);

					// test.pdf
					String[] fileNames = names[9].split("-", 2);
					for(String fileName : fileNames)
						System.out.println("BoardService-boardContent fileName : "+ fileName);
					
					board.setFileName(fileNames[1]);
				}
			}
			return board;
		}
		
		public void boardDownload(String no, HttpServletResponse response) {
			int n = 1;
			try{
				n = Integer.parseInt(no);
			}catch(Exception e){
				return ;
			}
			
			String fullPath = mapper.boardDownload(n);
			if(fullPath == null)
				return ;
			
			String[] names = fullPath.split("\\\\");
			String[] fileNames = names[9].split("-", 2);
			
			try {
				File file = new File(fullPath);
				if(file.exists() == false)
					return ;
				
				response.setHeader(
						"Content-Disposition", 
						//attachment;filename=test.pdf
						"attachment;filename=" + URLEncoder.encode(fileNames[1], "UTF-8"));
				
				FileInputStream fis = new FileInputStream(file);
				FileCopyUtils.copy(fis, response.getOutputStream());
				fis.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	
}
